import java.io.*;
public class CircularyLinkedList<E>
{
   public static class Node<E>
   {
       private E element;
       private Node<E> next;
       Node(E s,Node<E> n)
       {
           element=s;
           next=n;
        }
        public E getElement(){return element;}
        public Node<E> getNext(){return next;}
        public void setNext(Node<E> n){next=n;}
    }
    private Node<E> tail=null;
    private int size=0;
    public int size(){return size;}
    public boolean isEmpty()
    {
        return size==0;
        
    }
    public E first()
    {
        if(isEmpty())return null;
        else return tail.getNext().getElement();
        
    }
    public E last(){
        if(isEmpty())return null;
        else return tail.getElement();
    }
    public void rotate()
    {
        if(tail!=null)
        {
            tail=tail.getNext();
        }
    }
    public void addFirst(E e)
    {
        if(size==0)
        {
            tail=new Node(e,null);
            tail.setNext(null);
        }
        else
       { Node<E> next=new Node(e,tail.getNext());
        tail.setNext(next);
    }
    size++;
   }
   public void addLast(E e)
   {
       addFirst(e);
       tail=tail.getNext();
    }
    public E removalFirst()
    {
        if(isEmpty())return null;
        Node<E> h=tail.getNext();
        E element=tail.getNext().getElement();
        if(h==tail)tail=null;
        else tail.setNext(h.getNext());
        size--;
        h=null;
        return element;
        
    }
}
        
